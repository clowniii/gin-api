// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package boot

import (
	"go-apiadmin/internal/repository/dao"
	"go-apiadmin/internal/service"
)

// Injectors from injector.go:

func InitApp(configPath string) (*App, error) {
	config, err := ProvideConfig(configPath)
	if err != nil {
		return nil, err
	}
	logger, err := NewLogger(config)
	if err != nil {
		return nil, err
	}
	db, err := NewPostgres(config)
	if err != nil {
		return nil, err
	}
	client := NewRedis(config)
	producer := NewKafkaProducer(config)
	etcdClient, err := NewEtcd(config)
	if err != nil {
		return nil, err
	}
	manager := NewJWTManager(config)
	adminUserDAO := dao.NewAdminUserDAO(db)
	authService := service.NewAuthService(adminUserDAO, manager, client, config)
	adminAuthGroupDAO := dao.NewAdminAuthGroupDAO(db)
	adminAuthGroupAccessDAO := dao.NewAdminAuthGroupAccessDAO(db)
	cache := ProvideLayeredCache(client)
	userService := NewUserServiceWithLayered(adminUserDAO, adminAuthGroupDAO, adminAuthGroupAccessDAO, db, cache)
	adminAuthRuleDAO := dao.NewAdminAuthRuleDAO(db)
	permissionService := NewPermissionServiceWithLayered(adminAuthGroupAccessDAO, adminAuthRuleDAO, adminUserDAO, client, cache)
	adminMenuDAO := dao.NewAdminMenuDAO(db)
	menuService := NewMenuServiceWithLayered(adminMenuDAO, cache)
	authGroupService := NewAuthGroupServiceWithLayered(adminAuthGroupDAO, adminAuthGroupAccessDAO, permissionService, cache)
	authRuleService := NewAuthRuleServiceWithLayered(adminAuthRuleDAO, permissionService, cache)
	adminAppDAO := dao.NewAdminAppDAO(db)
	adminAppGroupDAO := dao.NewAdminAppGroupDAO(db)
	appService := NewAppServiceWithLayered(adminAppDAO, adminAppGroupDAO, cache)
	appGroupService := NewAppGroupServiceWithLayered(adminAppGroupDAO, cache)
	adminInterfaceGroupDAO := dao.NewAdminInterfaceGroupDAO(db)
	interfaceGroupService := NewInterfaceGroupServiceWithLayered(adminInterfaceGroupDAO, cache)
	adminInterfaceListDAO := dao.NewAdminInterfaceListDAO(db)
	interfaceListService := NewInterfaceListServiceWithLayered(adminInterfaceListDAO, cache)
	adminFieldsDAO := dao.NewAdminFieldsDAO(db)
	fieldsService := NewFieldsServiceDefault(adminFieldsDAO, adminInterfaceListDAO)
	adminUserActionDAO := dao.NewAdminUserActionDAO(db)
	logService := NewLogServiceDefault(adminUserActionDAO)
	adminGroupDAO := dao.NewAdminGroupDAO(db)
	wikiService := NewWikiServiceWithLayered(adminAppDAO, adminGroupDAO, adminInterfaceListDAO, adminFieldsDAO, cache)
	accessAsyncSender := ProvideAccessAsyncSender(config, producer, logger)
	engine := ProvideRouter(manager, logger, producer, accessAsyncSender, db, client, authService, userService, permissionService, menuService, authGroupService, authRuleService, appService, appGroupService, interfaceGroupService, interfaceListService, fieldsService, logService, etcdClient, config, wikiService)
	app := ProvideApp(config, logger, db, client, producer, etcdClient, manager, engine)
	app.AsyncAccessSender = accessAsyncSender
	return app, nil
}
